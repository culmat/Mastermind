package my.Mastermind;

import java.awt.*;
import java.util.Arrays;
import javax.swing.*;

/**
 * @author Robin Bonny
 */
public class MastermindUI extends javax.swing.JFrame {

    public MastermindUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title = new javax.swing.JLabel();
        GFrame = new javax.swing.JPanel();
        StartButton = new javax.swing.JButton();
        Button1 = new javax.swing.JButton();
        Button5 = new javax.swing.JButton();
        Button6 = new javax.swing.JButton();
        solutionFrame = new javax.swing.JPanel();
        solveButton = new javax.swing.JButton();
        Button2 = new javax.swing.JButton();
        Button3 = new javax.swing.JButton();
        Button4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Java Mastermind by Robin Bonny");
        setResizable(false);

        Title.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Title.setText("Mastermind by Robin Bonny");

        javax.swing.GroupLayout GFrameLayout = new javax.swing.GroupLayout(GFrame);
        GFrame.setLayout(GFrameLayout);
        GFrameLayout.setHorizontalGroup(
            GFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 515, Short.MAX_VALUE)
        );
        GFrameLayout.setVerticalGroup(
            GFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 760, Short.MAX_VALUE)
        );

        StartButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        StartButton.setText("Start Game");
        StartButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StartButtonMouseClicked(evt);
            }
        });

        Button1.setBackground(new java.awt.Color(255, 0, 0));
        Button1.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        Button1.setText("Red");
        Button1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Button1.setEnabled(false);
        Button1.setPreferredSize(new java.awt.Dimension(70, 30));
        Button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button1ActionPerformed(evt);
            }
        });

        Button5.setBackground(new java.awt.Color(0, 255, 255));
        Button5.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        Button5.setText("Cyan");
        Button5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Button5.setEnabled(false);
        Button5.setPreferredSize(new java.awt.Dimension(70, 30));
        Button5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button5ActionPerformed(evt);
            }
        });

        Button6.setBackground(new java.awt.Color(255, 0, 255));
        Button6.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        Button6.setText("Magenta");
        Button6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Button6.setEnabled(false);
        Button6.setPreferredSize(new java.awt.Dimension(70, 30));
        Button6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout solutionFrameLayout = new javax.swing.GroupLayout(solutionFrame);
        solutionFrame.setLayout(solutionFrameLayout);
        solutionFrameLayout.setHorizontalGroup(
            solutionFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        solutionFrameLayout.setVerticalGroup(
            solutionFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 55, Short.MAX_VALUE)
        );

        solveButton.setText("Show Solution");
        solveButton.setToolTipText("");
        solveButton.setActionCommand("solveButton");
        solveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveButtonActionPerformed(evt);
            }
        });

        Button2.setBackground(new java.awt.Color(0, 255, 0));
        Button2.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        Button2.setText("Green");
        Button2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Button2.setEnabled(false);
        Button2.setPreferredSize(new java.awt.Dimension(70, 30));
        Button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button2ActionPerformed(evt);
            }
        });

        Button3.setBackground(new java.awt.Color(0, 0, 255));
        Button3.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        Button3.setText("Blue");
        Button3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Button3.setEnabled(false);
        Button3.setPreferredSize(new java.awt.Dimension(70, 30));
        Button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button3ActionPerformed(evt);
            }
        });

        Button4.setBackground(new java.awt.Color(255, 165, 0));
        Button4.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        Button4.setText("Orange");
        Button4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Button4.setEnabled(false);
        Button4.setPreferredSize(new java.awt.Dimension(70, 30));
        Button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(solutionFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Title, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(solveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(GFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(Button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Button2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Button3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Button4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Button5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Button6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(51, 51, 51)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StartButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(solutionFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(solveButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Button5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Button6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Button3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Button4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Button2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Button1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Antialiasing (Kantenglättung) für gezeichnete Formen
    RenderingHints hints = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

    //Methode zum Zeichnen der Kreise, nimmt Koordinaten aus getColorXY() und Farbe von entsprechendem Button
    public void paintCircle(int x, int y, int ColorInt) {
        Graphics2D g = (Graphics2D) GFrame.getGraphics();
        g.setRenderingHints(hints);
        switch (ColorInt) {
            case 0:
                g.setColor(Color.red);
                break;
            case 1:
                g.setColor(Color.green);
                break;
            case 2:
                g.setColor(Color.blue);
                break;
            case 3:
                g.setColor(Color.orange);
                break;
            case 4:
                g.setColor(Color.cyan);
                break;
            case 5:
                g.setColor(Color.magenta);
                break;
        }
        g.fillOval(x, y, 45, 45);
    }

    //Metode zum Zeichen der Pins, nimmt Koordinaten aus getPinsXY() und Farbe vaus Auswertung von eval()
    public void paintPins(int x, int y, int ColorBW) {
        Graphics2D g = (Graphics2D) GFrame.getGraphics();
        g.setRenderingHints(hints);
        g.setColor(Color.black);
        switch (ColorBW) {
            case 0: //schwarzer Pin
                g.fillOval(x, y, 20, 20);
                break;
            case 1: //weisser Pin
                g.setColor(Color.white);
                g.fillOval(x, y, 20, 20);
                g.setColor(Color.black);
                g.drawOval(x, y, 20, 20);
                break;
        }
    }

    //Methode zur Übergabe der Koordinaten für Kreise an paintCircle(), ruft entsprechenden Kreis mittels Zählmethode countCircles() auf, zeichnet kleine schwarze Kreise als Hinweis auf nächstes Feld und reuft Überprufung mittels eval() auf
    public void getColorXY(int color) {
        Graphics2D g = (Graphics2D) GFrame.getGraphics();
        g.setRenderingHints(hints);
        g.setColor(Color.black);
        int calcX = -100;
        int calcY = -100;
        switch (countCircles()) {
            case 0:
                cg[0][0] = color;
                calcX = 43;
                calcY = 673;
                g.fillOval(130, 690, 10, 10);
                break;
            case 1:
                cg[1][0] = color;
                calcX = 113;
                calcY = 673;
                g.fillOval(200, 690, 10, 10);
                break;
            case 2:
                cg[2][0] = color;
                calcX = 183;
                calcY = 673;
                g.fillOval(270, 690, 10, 10);
                break;
            case 3:
                cg[3][0] = color;
                calcX = 253;
                calcY = 673;
                g.fillOval(60, 620, 10, 10);
                eval(0);
                break;
            case 4:
                cg[0][1] = color;
                calcX = 43;
                calcY = 603;
                g.fillOval(130, 620, 10, 10);
                break;
            case 5:
                cg[1][1] = color;
                calcX = 113;
                calcY = 603;
                g.fillOval(200, 620, 10, 10);
                break;
            case 6:
                cg[2][1] = color;
                calcX = 183;
                calcY = 603;
                g.fillOval(270, 620, 10, 10);
                break;
            case 7:
                cg[3][1] = color;
                calcX = 253;
                calcY = 603;
                g.fillOval(60, 550, 10, 10);
                eval(1);
                break;
            case 8:
                cg[0][2] = color;
                calcX = 43;
                calcY = 533;
                g.fillOval(130, 550, 10, 10);
                break;
            case 9:
                cg[1][2] = color;
                calcX = 113;
                calcY = 533;
                g.fillOval(200, 550, 10, 10);
                break;
            case 10:
                cg[2][2] = color;
                calcX = 183;
                calcY = 533;
                g.fillOval(270, 550, 10, 10);
                break;
            case 11:
                cg[3][2] = color;
                calcX = 253;
                calcY = 533;
                g.fillOval(60, 480, 10, 10);
                eval(2);
                break;
            case 12:
                cg[0][3] = color;
                calcX = 43;
                calcY = 463;
                g.fillOval(130, 480, 10, 10);
                break;
            case 13:
                cg[1][3] = color;
                calcX = 113;
                calcY = 463;
                g.fillOval(200, 480, 10, 10);
                break;
            case 14:
                cg[2][3] = color;
                calcX = 183;
                calcY = 463;
                g.fillOval(270, 480, 10, 10);
                break;
            case 15:
                cg[3][3] = color;
                calcX = 253;
                calcY = 463;
                g.fillOval(60, 410, 10, 10);
                eval(3);
                break;
            case 16:
                cg[0][4] = color;
                calcX = 43;
                calcY = 393;
                g.fillOval(130, 410, 10, 10);
                break;
            case 17:
                cg[1][4] = color;
                calcX = 113;
                calcY = 393;
                g.fillOval(200, 410, 10, 10);
                break;
            case 18:
                cg[2][4] = color;
                calcX = 183;
                calcY = 393;
                g.fillOval(270, 410, 10, 10);
                break;
            case 19:
                cg[3][4] = color;
                calcX = 253;
                calcY = 393;
                g.fillOval(60, 340, 10, 10);
                eval(4);
                break;
            case 20:
                cg[0][5] = color;
                calcX = 43;
                calcY = 323;
                g.fillOval(130, 340, 10, 10);
                break;
            case 21:
                cg[1][5] = color;
                calcX = 113;
                calcY = 323;
                g.fillOval(200, 340, 10, 10);
                break;
            case 22:
                cg[2][5] = color;
                calcX = 183;
                calcY = 323;
                g.fillOval(270, 340, 10, 10);
                break;
            case 23:
                cg[3][5] = color;
                calcX = 253;
                calcY = 323;
                g.fillOval(60, 270, 10, 10);
                eval(5);
                break;
            case 24:
                cg[0][6] = color;
                calcX = 43;
                calcY = 253;
                g.fillOval(130, 270, 10, 10);
                break;
            case 25:
                cg[1][6] = color;
                calcX = 113;
                calcY = 253;
                g.fillOval(200, 270, 10, 10);
                break;
            case 26:
                cg[2][6] = color;
                calcX = 183;
                calcY = 253;
                g.fillOval(270, 270, 10, 10);
                break;
            case 27:
                cg[3][6] = color;
                calcX = 253;
                calcY = 253;
                g.fillOval(60, 200, 10, 10);
                eval(6);
                break;
            case 28:
                cg[0][7] = color;
                calcX = 43;
                calcY = 183;
                g.fillOval(130, 200, 10, 10);
                break;
            case 29:
                cg[1][7] = color;
                calcX = 113;
                calcY = 183;
                g.fillOval(200, 200, 10, 10);
                break;
            case 30:
                cg[2][7] = color;
                calcX = 183;
                calcY = 183;
                g.fillOval(270, 200, 10, 10);
                break;
            case 31:
                cg[3][7] = color;
                calcX = 253;
                calcY = 183;
                g.fillOval(60, 130, 10, 10);
                eval(7);
                break;
            case 32:
                cg[0][8] = color;
                calcX = 43;
                calcY = 113;
                g.fillOval(130, 130, 10, 10);
                break;
            case 33:
                cg[1][8] = color;
                calcX = 113;
                calcY = 113;
                g.fillOval(200, 130, 10, 10);
                break;
            case 34:
                cg[2][8] = color;
                calcX = 183;
                calcY = 113;
                g.fillOval(270, 130, 10, 10);
                break;
            case 35:
                cg[3][8] = color;
                calcX = 253;
                calcY = 113;
                g.fillOval(60, 60, 10, 10);
                eval(8);
                break;
            case 36:
                cg[0][9] = color;
                calcX = 43;
                calcY = 43;
                g.fillOval(130, 60, 10, 10);
                break;
            case 37:
                cg[1][9] = color;
                calcX = 113;
                calcY = 43;
                g.fillOval(200, 60, 10, 10);
                break;
            case 38:
                cg[2][9] = color;
                calcX = 183;
                calcY = 43;
                g.fillOval(270, 60, 10, 10);
                break;
            case 39:
                cg[3][9] = color;
                calcX = 253;
                calcY = 43;
                eval(9);
                break;
        }
        paintCircle(calcX, calcY, color);
    }

    //Methode zur Übergabe der Koordinaten für Pins an paintPins(), ruft Anzahl Pins aus eval() auf
    public void getPinsXY(int row) {
        int calcX = 350;
        int calcY = -100;
        calcY = 695 - row * 70;
        int endB = 0;
        int endW = 0;
        endB = blackPin[row];
        endW = whitePin[row];
        for (int b = 0; b < endB; b++) {
            paintPins(calcX + b * 25, calcY - 25, 0);
        }
        for (int w = 0; w < endW; w++) {
            paintPins(calcX + w * 25, calcY + 5, 1);
        }
    }

    //globale Arrays für Koorektur-Pins
    int whitePin[] = new int[10];
    int blackPin[] = new int[10];

    //Methode zur Überprufung der eingebenen Farben, berehcnet Anzahl schwarze und weisse Pins
    public void eval(int row) {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (i != j && cg[0][row] != cg[1][row] && cg[1][row] != cg[2][row] && cg[2][row] != cg[3][row]) {
                    if (cg[j][row] == cs[i]) {
                        whitePin[row]++;
                    }
                }
            }
            if (cg[i][row] == cs[i]) {
                blackPin[row]++;
            }
        }
        /*ct = cg;
        for (int k = 0; k < 4; k++) {
            if (ct[0][row] == cs[k] && k != 0) {
                whitePin[row]++;
                ct[0][row] = 10;
            }
            if (ct[1][row] == cs[k] && k != 1) {
                whitePin[row]++;
                ct[1][row] = 10;
            }
            if (ct[2][row] == cs[k] && k != 2) {
                whitePin[row]++;
                ct[2][row] = 10;
            }
            if (ct[3][row] == cs[k] && k != 3) {
                whitePin[row]++;
                ct[3][row] = 10;
            }

        }*/
        System.out.println("black " + Arrays.toString(blackPin));
        System.out.println("white " + Arrays.toString(whitePin));
        getPinsXY(row);
        //Ausnahmefall falls alle Farben korrekt, Spieler hat gewonnen
        if (blackPin[row] == 4) {
            Title.setText("Congratulations, you have won!");
            showSolution();
        }
    }

    //globale Zählvariable für Position der Kreise
    int circles = -1;
    //Zählmethode der gesetzten Kreise, Weitergabe an getColorXY()
    int countCircles() {
        circles++;
        //Ausnahme falls keine Felder mehr übrig, Spieler hat verloren
        if (circles == 39) {
            Title.setText("You have lost, click on button to start a new game.");
            showSolution();
        }
        return circles;
    }

    //Methode zum Anzeigen der korrekten Lösung, falls Spieler gewonnen hat, verloren hat oder aufgegeben hat
    public void showSolution() {
        Graphics2D g = (Graphics2D) solutionFrame.getGraphics();
        g.setRenderingHints(hints);
        for (int i = 0; i < 4; i++) {
            switch (cs[i]) {
                case 0:
                    g.setColor(Color.red);
                    break;
                case 1:
                    g.setColor(Color.green);
                    break;
                case 2:
                    g.setColor(Color.blue);
                    break;
                case 3:
                    g.setColor(Color.orange);
                    break;
                case 4:
                    g.setColor(Color.cyan);
                    break;
                case 5:
                    g.setColor(Color.magenta);
                    break;
            }
            g.fillOval(i * 70 + 43, 6, 44, 44);
        }
        Button1.setEnabled(false);
        Button2.setEnabled(false);
        Button3.setEnabled(false);
        Button4.setEnabled(false);
        Button5.setEnabled(false);
        Button6.setEnabled(false);
    }

    //globales Array für Eingaben des Spielers
    int cg[][] = new int[4][10];
    //globales Array für korrekte Lösung
    int cs[] = new int[4];

    //Startbutton räumt vorheriges Spielfeld auf, zeichnet neues Spielfeld und berechnet neue Lösung
    private void StartButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StartButtonMouseClicked
        Title.setText("Mastermind by Robin Bonny");
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 10; b++) {
                cg[a][b] = 0;
            }
            cs[a] = 0;
        }
        for (int b = 0; b < 10; b++) {
            blackPin[b] = 0;
            whitePin[b] = 0;
        }
        circles = -1;
        Button1.setEnabled(true);
        Button2.setEnabled(true);
        Button3.setEnabled(true);
        Button4.setEnabled(true);
        Button5.setEnabled(true);
        Button6.setEnabled(true);

        Graphics2D g = (Graphics2D) GFrame.getGraphics();
        g.setRenderingHints(hints);
        g.clearRect(0, 0, 5000, 5000);
        g.drawRect(20, 20, 300, 720);
        for (int v = 0; v < 4; v++) {
            for (int h = 0; h < 10; h++) {
                g.drawOval(v * 70 + 40, h * 70 + 40, 50, 50);
            }
        }
        g.fillOval(60, 690, 10, 10);
        for (int i = 0; i < 4; i++) {
            cs[i] = (int) (Math.random() * 6);
        }
        System.out.println(Arrays.toString(cs));

        Graphics2D s = (Graphics2D) solutionFrame.getGraphics();
        s.setRenderingHints(hints);
        s.clearRect(0, 0, 500, 60);
        s.setColor(Color.DARK_GRAY);
        for (int l = 0; l < 4; l++) {
            s.fillOval(l * 70 + 40, 3, 50, 50);
        }
    }//GEN-LAST:event_StartButtonMouseClicked

    //Button rot
    private void Button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button1ActionPerformed
        getColorXY(0);
    }//GEN-LAST:event_Button1ActionPerformed

    //Button grün
    private void Button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button2ActionPerformed
        getColorXY(1);
    }//GEN-LAST:event_Button2ActionPerformed

    //Button blau
    private void Button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button3ActionPerformed
        getColorXY(2);
    }//GEN-LAST:event_Button3ActionPerformed

    //Button orange
    private void Button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button4ActionPerformed
        getColorXY(3);
    }//GEN-LAST:event_Button4ActionPerformed

    //Button cyan
    private void Button5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button5ActionPerformed
        getColorXY(4);
    }//GEN-LAST:event_Button5ActionPerformed

    //Button magenta
    private void Button6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button6ActionPerformed
        getColorXY(5);
    }//GEN-LAST:event_Button6ActionPerformed

    //Lösung anzeigen
    private void solveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveButtonActionPerformed
        Title.setText("You have lost, click on button to start a new game.");
        showSolution();
    }//GEN-LAST:event_solveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MastermindUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MastermindUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MastermindUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MastermindUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MastermindUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button1;
    private javax.swing.JButton Button2;
    private javax.swing.JButton Button3;
    private javax.swing.JButton Button4;
    private javax.swing.JButton Button5;
    private javax.swing.JButton Button6;
    private javax.swing.JPanel GFrame;
    private javax.swing.JButton StartButton;
    private javax.swing.JLabel Title;
    private javax.swing.JPanel solutionFrame;
    private javax.swing.JButton solveButton;
    // End of variables declaration//GEN-END:variables
}
